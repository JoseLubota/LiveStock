// <auto-generated />
using System;
using LiveStock.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LiveStock.Infrastructure.Migrations
{
    [DbContext(typeof(LiveStockDbContext))]
    [Migration("20251025184558_AzureInit")]
    partial class AzureInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LiveStock.Core.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PurchasePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Fencing",
                            CreatedAt = new DateTime(2025, 8, 26, 18, 45, 57, 756, DateTimeKind.Utc).AddTicks(3010),
                            Description = "High-quality barbed wire for camp fencing",
                            Location = "Storage Shed A",
                            Name = "Fencing Wire",
                            PurchaseDate = new DateTime(2025, 8, 26, 18, 45, 57, 756, DateTimeKind.Utc).AddTicks(1230),
                            PurchasePrice = 25.00m,
                            Quantity = 50,
                            Status = "Active",
                            Type = "Barbed Wire",
                            Unit = "rolls"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Feed",
                            CreatedAt = new DateTime(2025, 9, 25, 18, 45, 57, 756, DateTimeKind.Utc).AddTicks(4240),
                            Description = "Premium grain mix for livestock",
                            ExpiryDate = new DateTime(2026, 4, 25, 18, 45, 57, 756, DateTimeKind.Utc).AddTicks(3570),
                            Location = "Feed Storage",
                            Name = "Livestock Feed",
                            PurchaseDate = new DateTime(2025, 9, 25, 18, 45, 57, 756, DateTimeKind.Utc).AddTicks(3560),
                            PurchasePrice = 0.80m,
                            Quantity = 1000,
                            Status = "Active",
                            Type = "Grain Mix",
                            Unit = "kg"
                        });
                });

            modelBuilder.Entity("LiveStock.Core.Models.Camp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Hectares")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Camps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CampNumber = 1,
                            Description = "Camp 1 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 1"
                        },
                        new
                        {
                            Id = 2,
                            CampNumber = 2,
                            Description = "Camp 2 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 2"
                        },
                        new
                        {
                            Id = 3,
                            CampNumber = 3,
                            Description = "Camp 3 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 3"
                        },
                        new
                        {
                            Id = 4,
                            CampNumber = 4,
                            Description = "Camp 4 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 4"
                        },
                        new
                        {
                            Id = 5,
                            CampNumber = 5,
                            Description = "Camp 5 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 5"
                        },
                        new
                        {
                            Id = 6,
                            CampNumber = 6,
                            Description = "Camp 6 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 6"
                        },
                        new
                        {
                            Id = 7,
                            CampNumber = 7,
                            Description = "Camp 7 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 7"
                        },
                        new
                        {
                            Id = 8,
                            CampNumber = 8,
                            Description = "Camp 8 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 8"
                        },
                        new
                        {
                            Id = 9,
                            CampNumber = 9,
                            Description = "Camp 9 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 9"
                        },
                        new
                        {
                            Id = 10,
                            CampNumber = 10,
                            Description = "Camp 10 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 10"
                        },
                        new
                        {
                            Id = 11,
                            CampNumber = 11,
                            Description = "Camp 11 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 11"
                        },
                        new
                        {
                            Id = 12,
                            CampNumber = 12,
                            Description = "Camp 12 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 12"
                        },
                        new
                        {
                            Id = 13,
                            CampNumber = 13,
                            Description = "Camp 13 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 13"
                        },
                        new
                        {
                            Id = 14,
                            CampNumber = 14,
                            Description = "Camp 14 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 14"
                        },
                        new
                        {
                            Id = 15,
                            CampNumber = 15,
                            Description = "Camp 15 - Livestock grazing area",
                            Hectares = 153.33000000000001,
                            Name = "Camp 15"
                        });
                });

            modelBuilder.Entity("LiveStock.Core.Models.CampMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("AnimalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CampId")
                        .HasColumnType("int");

                    b.Property<int?>("CowId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromCampId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SheepId")
                        .HasColumnType("int");

                    b.Property<int>("ToCampId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CampId");

                    b.HasIndex("CowId");

                    b.HasIndex("FromCampId");

                    b.HasIndex("SheepId");

                    b.HasIndex("ToCampId");

                    b.ToTable("CampMovements");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Cow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CampId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EarTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpectedCalvingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPregnant")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampId");

                    b.ToTable("Cows");
                });

            modelBuilder.Entity("LiveStock.Core.Models.FarmTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Importance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("CreatedById");

                    b.ToTable("FarmTasks");
                });

            modelBuilder.Entity("LiveStock.Core.Models.FinancialRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FinancialRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 450.00m,
                            Category = "Livestock Sales",
                            CreatedAt = new DateTime(2025, 10, 15, 18, 45, 57, 755, DateTimeKind.Utc).AddTicks(4200),
                            Description = "Sheep Sale - Merino Ewe",
                            Reference = "INV-001",
                            TransactionDate = new DateTime(2025, 10, 15, 18, 45, 57, 755, DateTimeKind.Utc).AddTicks(2410),
                            Type = "Income"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 150.00m,
                            Category = "Veterinary",
                            CreatedAt = new DateTime(2025, 10, 10, 18, 45, 57, 755, DateTimeKind.Utc).AddTicks(4770),
                            Description = "Veterinary Services",
                            Reference = "REC-001",
                            TransactionDate = new DateTime(2025, 10, 10, 18, 45, 57, 755, DateTimeKind.Utc).AddTicks(4770),
                            Type = "Expense"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 300.00m,
                            Category = "Feed",
                            CreatedAt = new DateTime(2025, 10, 5, 18, 45, 57, 755, DateTimeKind.Utc).AddTicks(4770),
                            Description = "Feed Purchase",
                            Reference = "INV-002",
                            TransactionDate = new DateTime(2025, 10, 5, 18, 45, 57, 755, DateTimeKind.Utc).AddTicks(4770),
                            Type = "Expense"
                        });
                });

            modelBuilder.Entity("LiveStock.Core.Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("AnimalType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CowId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SheepId")
                        .HasColumnType("int");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("TreatmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Veterinarian")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CowId");

                    b.HasIndex("SheepId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsBroadcast")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("LiveStock.Core.Models.RainfallRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountMl")
                        .HasColumnType("float");

                    b.Property<int>("CampId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RainfallDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampId");

                    b.ToTable("RainfallRecords");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Sheep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CampId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhotoID")
                        .HasColumnType("int");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SheepID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CampId");

                    b.ToTable("Sheep");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 25, 18, 45, 57, 754, DateTimeKind.Utc).AddTicks(8340),
                            Email = "owner@farm.com",
                            EmployeeId = "FARM001",
                            IsActive = true,
                            Name = "Farm Owner",
                            PhoneNumber = "+1234567890",
                            Role = "Farmer"
                        });
                });

            modelBuilder.Entity("LiveStock.Core.Models.CampMovement", b =>
                {
                    b.HasOne("LiveStock.Core.Models.Camp", null)
                        .WithMany("CampMovements")
                        .HasForeignKey("CampId");

                    b.HasOne("LiveStock.Core.Models.Cow", null)
                        .WithMany("CampMovements")
                        .HasForeignKey("CowId");

                    b.HasOne("LiveStock.Core.Models.Camp", "FromCamp")
                        .WithMany()
                        .HasForeignKey("FromCampId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LiveStock.Core.Models.Sheep", null)
                        .WithMany("CampMovements")
                        .HasForeignKey("SheepId");

                    b.HasOne("LiveStock.Core.Models.Camp", "ToCamp")
                        .WithMany()
                        .HasForeignKey("ToCampId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromCamp");

                    b.Navigation("ToCamp");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Cow", b =>
                {
                    b.HasOne("LiveStock.Core.Models.Camp", "Camp")
                        .WithMany("Cows")
                        .HasForeignKey("CampId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Camp");
                });

            modelBuilder.Entity("LiveStock.Core.Models.FarmTask", b =>
                {
                    b.HasOne("LiveStock.Core.Models.Staff", "AssignedTo")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LiveStock.Core.Models.Staff", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("LiveStock.Core.Models.MedicalRecord", b =>
                {
                    b.HasOne("LiveStock.Core.Models.Cow", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("CowId");

                    b.HasOne("LiveStock.Core.Models.Sheep", null)
                        .WithMany("MedicalRecords")
                        .HasForeignKey("SheepId");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Message", b =>
                {
                    b.HasOne("LiveStock.Core.Models.Staff", "Recipient")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LiveStock.Core.Models.Staff", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LiveStock.Core.Models.RainfallRecord", b =>
                {
                    b.HasOne("LiveStock.Core.Models.Camp", "Camp")
                        .WithMany("RainfallRecords")
                        .HasForeignKey("CampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camp");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Sheep", b =>
                {
                    b.HasOne("LiveStock.Core.Models.Camp", "Camp")
                        .WithMany("Sheep")
                        .HasForeignKey("CampId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Camp");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Camp", b =>
                {
                    b.Navigation("CampMovements");

                    b.Navigation("Cows");

                    b.Navigation("RainfallRecords");

                    b.Navigation("Sheep");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Cow", b =>
                {
                    b.Navigation("CampMovements");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Sheep", b =>
                {
                    b.Navigation("CampMovements");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("LiveStock.Core.Models.Staff", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
